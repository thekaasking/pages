---
---

<button id="theme-toggle" aria-label="Toggle dark mode">
  <span class="theme-text">🌙</span>
  <svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  #theme-toggle {
    background: none;
    border: 1px solid var(--border);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    color: var(--text-heading);
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
  }

  #theme-toggle:hover {
    color: var(--palette-primary);
  }

  #theme-toggle .sun-icon,
  #theme-toggle .moon-icon,
  #theme-toggle .theme-text {
    display: none;
  }

  /* Show sun icon for light theme */
  [data-theme="light"] #theme-toggle .sun-icon {
    display: block;
  }

  /* Show moon icon for dark theme */
  [data-theme="dark"] #theme-toggle .moon-icon {
    display: block;
  }

  /* Default to light theme if no data-theme is set */
  :root:not([data-theme]) #theme-toggle .sun-icon {
    display: block;
  }

  /* Fallback text - always visible if neither icon is showing */
  #theme-toggle .theme-text {
    display: block;
    font-size: 18px;
  }
</style>

<script>
  function initTheme() {
    const html = document.documentElement;
    const themeToggle = document.getElementById('theme-toggle');
    const themeText = themeToggle?.querySelector('.theme-text');

    function updateThemeDisplay(theme) {
      if (themeText) {
        themeText.textContent = theme === 'dark' ? '☀️' : '🌙';
      }
    }

    // Get saved theme or default to system preference
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      html.setAttribute('data-theme', savedTheme);
      updateThemeDisplay(savedTheme);
    } else {
      // Check system preference and set explicit theme
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const theme = prefersDark ? 'dark' : 'light';
      html.setAttribute('data-theme', theme);
      updateThemeDisplay(theme);
    }

    themeToggle?.addEventListener('click', () => {
      const currentTheme = html.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      html.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      updateThemeDisplay(newTheme);
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTheme);
  } else {
    initTheme();
  }
</script>